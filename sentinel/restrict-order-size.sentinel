# This policy uses the Sentinel tfplan import to restrict
# the number of items in a pizza order sent to Dominos by Terraform Cloud

##### Imports #####
import "tfplan"
import "strings"

##### Functions #####

# Find all resources of a specific type from all modules using the tfplan import
find_resources_from_plan = func(type) {

  resources = {}

  # Iterate over all modules in the tfplan import
  for tfplan.module_paths as path {
    # Iterate over the named resources of desired type in the module
    for tfplan.module(path).resources[type] else {} as name, instances {
      # Iterate over resource instances
      for instances as index, r {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to resources map, setting the key to the address
        resources[address] = r
      }
    }
  }

  return resources
}

calculate_total_number_of_items_across_all_orders = func() {

  # Get all orders from the plan
  orders = find_resources_from_plan("dominos_order")

  # Initialize items_count to 0
  items_count = 0

  # Iterate over all orders, adding number of items for all of them
  for orders as address, order {
    print("current order's items:", order.applied.item_codes)
    items_count += length(order.applied.item_codes)
  }

  print("Total number of items:", items_count)
  return items_count

}

##### Rules #####

# Main rule
total_number_of_items = calculate_total_number_of_items_across_all_orders()
main = rule {
  total_number_of_items <= 2
}
