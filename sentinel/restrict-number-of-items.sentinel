# This policy uses the Sentinel tfstate import to restrict
# the number of items in a pizza order sent to Dominos by Terraform Cloud
# It does this by inspecting the actual dominos_menu_item data sources

##### Imports #####
import "tfstate"
import "strings"

##### Functions #####

# Find all data sources of specific type from all modules using the tfstate import
find_data_sources_from_state = func(type) {

  data_sources = {}

  # Iterate over all modules in the tfstate import
  for tfstate.module_paths as path {

    # Iterate over the named data sources of desired type in the module
    for tfstate.module(path).data[type] else {} as name, instances {

      # Iterate over data source instances
      for instances as index, d {

        # Get the address of the instance
        if length(path) == 0 {
          # root module
          address = type + "." + name + "[" + string(index) + "]"
        } else {
          # non-root module
          address = "module." + strings.join(path, ".module.") + "." +
                    type + "." + name + "[" + string(index) + "]"
        }

        # Add the instance to map, setting the key to the address
        data_sources[address] = d
      }
    }
  }

  return data_sources
}


calculate_total_number_of_items = func() {

  # Get dominos_menu_item data sources
  menu_items = find_data_sources_from_state("dominos_menu_item")

  # Initialize items_count to 0
  items_count = 0

  # Iterate over all menu items in the order
  # Note that each menu item has a list of matches
  # each of which has code, name, and price_cents
  for menu_items as address, d {
    for d.attr.matches as match {
      # Increment items_count
      print( "Adding menu_item:", match)
      items_count = items_count + 1
    }
  }

  print("Total number of items:", items_count)
  return items_count

}

##### Rules #####

# Main rule
total_number_of_items = calculate_total_number_of_items()
main = rule {
  total_number_of_items < 3
}
